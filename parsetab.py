
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programaleftPLUSMINUSleftMULDIVAND COLLON COMMA CPAREN DIV DO ELSE ELSIF END EQUAL EQUALS EXIT GET GT ID IF INT LET LT MINUS MUL NE NOT NUMBER OPAREN OR PLUS PROGRAM READ REAL STRING SUBROUTINE THEN WRITEempty :programa : PROGRAM ID variables statements END PROGRAM ID subroutinesvariables : variables variables1\n                | variables variables2\n                | variables variables3\n                | variables variables4\n                | variables1 : tipo ID loopvars loopvars : loopvars COMMA ID\n                | emptyvariables2 : tipo ID EQUAL NUMBER\n                    | tipo ID EQUAL REAL variables3 : tipo ID paso1dim OPAREN paso2dim NUMBER paso3dim COMMA NUMBER paso4dim CPAREN paso52dimvariables4 : tipo ID paso1dim OPAREN paso2dim NUMBER paso3dim CPAREN paso51dimpaso1dim : paso2dim : paso3dim : paso4dim : paso51dim :paso52dim :statements : statements statement\n                | statement\n                | tipo : INT\n            | REALsubroutines : subroutines SUBROUTINE ID statements END SUBROUTINE\n                | SUBROUTINE ID statements END SUBROUTINE\n                | statement : declare\n                | ID OPAREN CPAREN\n                | ID COLLON DO dowhile END DO ID\n                | READ ID readquad\n                | WRITE write writequad\n                | IF paso1bool ifs ELSE paso3bool statements END IF paso4bool\n                | IF paso1bool ifs END IF paso4bool\n                | DO ID paso1for EQUAL expression paso2for COMMA expression paso3for COMMA expression statements paso4for1 END DO\n                | DO ID paso1for EQUAL expression paso2for COMMA expression paso3for statements paso4for2 END DO\n                | DO paso1do dowhilenoid paso2do END DOwrite : expression correction\n                | STRINGcorrection : paso1bool : paso3bool :paso1do : paso2do : paso1for : paso2for : paso3for : paso4for1 : paso4for2 : writequad : readquad : declare : ID paso8 EQUAL expression paso9\n                | ID paso8 OPAREN expression COMMA expression CPAREN EQUAL expression paso9\n                | ID paso8 OPAREN expression CPAREN EQUAL expression paso9paso8 : paso9 : ifs : OPAREN logicexp CPAREN paso2bool THEN statements iffs paso2bool :paso4bool :iffs : iffs ELSIF paso3bool OPAREN logicexp CPAREN paso2bool THEN statements\n            | ELSIF paso3bool OPAREN logicexp CPAREN paso2bool THEN statements\n            | dowhile : dowhile statements IF OPAREN logicexp CPAREN EXIT paso4do statements ID\n                | statements IF OPAREN logicexp CPAREN EXIT paso4do statements IDdowhilenoid : dowhilenoid IF OPAREN logicexp CPAREN EXIT paso4do statements\n    | IF OPAREN logicexp CPAREN EXIT paso4do statementspaso4do : expression : expression paso4 PLUS paso23 subexpression paso4\n                | expression paso4 MINUS paso23 subexpression paso4\n                | subexpression paso4 paso4 : paso23 :subexpression : subexpression paso5 MUL paso23 ssubexpression paso5\n                | subexpression paso5 DIV paso23 ssubexpression paso5\n                | ssubexpression paso5paso5 :ssubexpression : ID paso1\n                        | ID paso14 OPAREN expression CPAREN\n                        | ID paso14 OPAREN expression COMMA expression CPAREN\n                        | NUMBER paso12\n                        | REAL paso13\n                        | OPAREN paso6 expression CPAREN paso7paso1 :paso12 :paso13 :paso14 :paso6 :paso7 :andornot : logicexp : logicexp paso2lgexp AND andornot NOT andornot slogicexp pasonot paso2lgexp\n                | logicexp paso2lgexp OR andornot NOT andornot slogicexp pasonot paso2lgexp\n                | logicexp paso2lgexp AND andornot NOT andornot slogicexp pasonot logicop slogicexp paso1lgexp paso2lgexp\n                | logicexp paso2lgexp OR andornot NOT andornot slogicexp pasonot logicop slogicexp paso1lgexp paso2lgexp\n                | NOT andornot slogicexp pasonot paso2lgexp\n                | slogicexp logicop slogicexp paso1lgexp paso2lgexp\n                | logicexp paso2lgexp AND andornot slogicexp logicop slogicexp paso1lgexp paso2lgexp\n                | logicexp paso2lgexp OR andornot slogicexp logicop slogicexp paso1lgexp paso2lgexppaso1lgexp :paso2lgexp :pasonot : slogicexp : OPAREN logicexp CPAREN\n                | ID paso1\n                | NUMBER paso12\n                | REAL paso13\n                | ID OPAREN expression COMMA expression CPAREN\n                | ID OPAREN expression CPARENlogicop : GT\n                | GET\n                | NE\n                | EQUALS\n                | LET\n                | LT'
    
_lr_action_items = {'REAL':([3,4,12,13,16,17,18,25,33,44,46,47,56,60,61,64,68,69,72,73,74,75,76,78,79,91,92,96,99,102,103,105,106,112,116,117,118,119,120,121,122,126,129,138,144,147,152,153,162,170,176,177,180,187,193,197,199,208,214,215,216,217,224,237,244,248,253,256,258,],[-7,5,-6,26,-5,-4,-3,-1,-88,-8,73,-10,26,26,26,86,86,26,-11,-12,26,-73,-73,-73,-73,86,-90,86,-9,26,26,26,26,26,-109,-110,-111,-113,-108,-112,86,26,86,26,86,26,-90,-90,26,86,86,86,26,-19,26,-90,-90,-14,86,86,86,86,26,-20,86,-13,86,86,86,]),'DO':([3,4,6,10,12,16,17,18,19,20,24,25,26,27,28,29,30,31,32,34,35,43,44,47,48,49,51,52,53,55,57,59,62,72,73,80,81,82,84,95,99,104,108,109,110,113,114,130,132,137,139,140,141,142,143,149,150,158,159,161,165,166,167,168,171,172,178,183,184,185,186,187,189,192,194,200,205,206,207,208,210,212,213,222,223,226,227,228,236,237,238,239,246,247,248,249,250,259,261,266,271,274,276,277,278,],[-7,7,7,-22,-6,-5,-4,-3,-29,-21,-52,-1,-86,-85,-84,-51,-40,-72,-77,-41,59,-32,-8,-10,-82,-81,-78,-33,-71,-76,-39,7,-30,-11,-12,7,7,-57,-43,132,-9,-89,7,146,-53,7,-60,7,-38,-79,-77,-77,-83,-72,-72,7,-35,7,7,-68,-74,-75,-69,-70,-31,-57,7,7,-68,7,-48,-19,-80,-55,-60,7,7,7,7,-14,-68,-57,-34,7,7,7,-68,-54,7,-20,7,7,259,7,-13,-65,7,-37,-64,271,-36,7,7,7,7,]),'THEN':([125,154,264,269,270,275,],[-59,178,-59,274,-59,277,]),'READ':([3,4,6,10,12,16,17,18,19,20,24,25,26,27,28,29,30,31,32,34,43,44,47,48,49,51,52,53,55,57,59,62,72,73,80,81,82,84,99,104,108,110,113,114,130,132,137,139,140,141,142,143,149,150,158,159,161,165,166,167,168,171,172,178,183,184,185,186,187,189,192,194,200,205,206,207,208,210,212,213,222,223,226,227,228,236,237,238,239,247,248,249,250,259,261,271,274,276,277,278,],[-7,8,8,-22,-6,-5,-4,-3,-29,-21,-52,-1,-86,-85,-84,-51,-40,-72,-77,-41,-32,-8,-10,-82,-81,-78,-33,-71,-76,-39,8,-30,-11,-12,8,8,-57,-43,-9,-89,8,-53,8,-60,8,-38,-79,-77,-77,-83,-72,-72,8,-35,8,8,-68,-74,-75,-69,-70,-31,-57,8,8,-68,8,-48,-19,-80,-55,-60,8,8,8,8,-14,-68,-57,-34,8,8,8,-68,-54,8,-20,8,8,8,-13,-65,8,-37,-64,-36,8,8,8,8,]),'EQUAL':([14,23,25,36,42,111,173,249,261,],[-56,-46,46,60,69,147,193,-56,-56,]),'PROGRAM':([0,21,],[1,39,]),'MUL':([26,27,28,31,32,48,49,51,54,55,104,137,139,140,141,142,143,165,166,189,],[-86,-85,-84,-77,-77,-82,-81,-78,75,-76,-89,-79,-77,-77,-83,-77,-77,-74,-75,-80,]),'DIV':([26,27,28,31,32,48,49,51,54,55,104,137,139,140,141,142,143,165,166,189,],[-86,-85,-84,-77,-77,-82,-81,-78,76,-76,-89,-79,-77,-77,-83,-77,-77,-74,-75,-80,]),'MINUS':([26,27,28,31,32,34,48,49,51,53,55,58,77,82,83,98,101,104,137,139,140,141,142,143,148,155,164,165,166,167,168,172,186,189,201,212,236,],[-86,-85,-84,-72,-77,-72,-82,-81,-78,-71,-76,79,-72,-72,-72,-72,-72,-89,-79,-77,-77,-83,-72,-72,-72,-72,-72,-74,-75,-69,-70,-72,-72,-80,-72,-72,-72,]),'SUBROUTINE':([65,94,182,203,204,221,],[93,131,203,-27,221,-26,]),'GET':([86,87,88,90,115,123,127,156,179,196,198,220,230,232,241,243,],[-86,116,-85,-84,-105,-104,-103,-102,-107,116,116,-106,-101,-101,116,116,]),'NE':([86,87,88,90,115,123,127,156,179,196,198,220,230,232,241,243,],[-86,117,-85,-84,-105,-104,-103,-102,-107,117,117,-106,-101,-101,117,117,]),'COLLON':([14,249,261,],[35,35,35,]),'LT':([86,87,88,90,115,123,127,156,179,196,198,220,230,232,241,243,],[-86,119,-85,-84,-105,-104,-103,-102,-107,119,119,-106,-101,-101,119,119,]),'COMMA':([25,26,27,28,31,32,44,47,48,49,51,53,55,83,98,99,101,104,135,136,137,139,140,141,142,143,155,163,165,166,167,168,186,189,207,],[-1,-86,-85,-84,-72,-77,70,-10,-82,-81,-78,-71,-76,112,-47,-9,138,-89,162,-17,-79,-77,-77,-83,-72,-72,180,188,-74,-75,-69,-70,-48,-80,224,]),'PLUS':([26,27,28,31,32,34,48,49,51,53,55,58,77,82,83,98,101,104,137,139,140,141,142,143,148,155,164,165,166,167,168,172,186,189,201,212,236,],[-86,-85,-84,-72,-77,-72,-82,-81,-78,-71,-76,78,-72,-72,-72,-72,-72,-89,-79,-77,-77,-83,-72,-72,-72,-72,-72,-74,-75,-69,-70,-72,-72,-80,-72,-72,-72,]),'$end':([2,65,94,203,221,],[0,-28,-2,-27,-26,]),'GT':([86,87,88,90,115,123,127,156,179,196,198,220,230,232,241,243,],[-86,120,-85,-84,-105,-104,-103,-102,-107,120,120,-106,-101,-101,120,120,]),'END':([3,4,6,10,12,16,17,18,19,20,24,25,26,27,28,29,30,31,32,34,40,43,44,47,48,49,51,52,53,55,57,62,63,66,72,73,81,82,84,99,104,110,113,114,130,132,137,139,140,141,142,143,149,150,158,159,161,165,166,167,168,171,172,178,183,184,185,186,187,189,192,194,200,205,206,207,208,212,213,219,222,223,228,235,236,237,247,248,249,259,260,261,271,274,276,277,278,],[-7,-23,21,-22,-6,-5,-4,-3,-29,-21,-52,-1,-86,-85,-84,-51,-40,-72,-77,-41,-45,-32,-8,-10,-82,-81,-78,-33,-71,-76,-39,-30,85,95,-11,-12,109,-57,-43,-9,-89,-53,-23,-60,-23,-38,-79,-77,-77,-83,-72,-72,174,-35,182,-23,-68,-74,-75,-69,-70,-31,-57,-23,204,-68,-23,-48,-19,-80,-55,-60,-63,-23,-67,-23,-14,-57,-34,-58,-66,-50,-54,246,-23,-20,-49,-13,-65,-37,266,-64,-36,-23,-62,-23,-61,]),'STRING':([13,],[30,]),'EQUALS':([86,87,88,90,115,123,127,156,179,196,198,220,230,232,241,243,],[-86,118,-85,-84,-105,-104,-103,-102,-107,118,118,-106,-101,-101,118,118,]),'NUMBER':([13,33,46,56,60,61,64,68,69,71,74,75,76,78,79,91,92,96,100,102,103,105,106,112,116,117,118,119,120,121,122,126,129,138,144,147,152,153,162,170,176,177,180,188,193,197,199,214,215,216,217,224,244,253,256,258,],[27,-88,72,27,27,27,88,88,27,-16,27,-73,-73,-73,-73,88,-90,88,136,27,27,27,27,27,-109,-110,-111,-113,-108,-112,88,27,88,27,88,27,-90,-90,27,88,88,88,27,209,27,-90,-90,88,88,88,88,27,88,88,88,88,]),'WRITE':([3,4,6,10,12,16,17,18,19,20,24,25,26,27,28,29,30,31,32,34,43,44,47,48,49,51,52,53,55,57,59,62,72,73,80,81,82,84,99,104,108,110,113,114,130,132,137,139,140,141,142,143,149,150,158,159,161,165,166,167,168,171,172,178,183,184,185,186,187,189,192,194,200,205,206,207,208,210,212,213,222,223,226,227,228,236,237,238,239,247,248,249,250,259,261,271,274,276,277,278,],[-7,13,13,-22,-6,-5,-4,-3,-29,-21,-52,-1,-86,-85,-84,-51,-40,-72,-77,-41,-32,-8,-10,-82,-81,-78,-33,-71,-76,-39,13,-30,-11,-12,13,13,-57,-43,-9,-89,13,-53,13,-60,13,-38,-79,-77,-77,-83,-72,-72,13,-35,13,13,-68,-74,-75,-69,-70,-31,-57,13,13,-68,13,-48,-19,-80,-55,-60,13,13,13,13,-14,-68,-57,-34,13,13,13,-68,-54,13,-20,13,13,13,-13,-65,13,-37,-64,-36,13,13,13,13,]),'ELSIF':([10,19,20,24,26,27,28,29,30,31,32,34,43,48,49,51,52,53,55,57,62,82,104,110,114,132,137,139,140,141,142,143,150,165,166,167,168,171,172,178,189,192,194,200,212,213,219,228,259,271,274,276,277,278,],[-22,-29,-21,-52,-86,-85,-84,-51,-40,-72,-77,-41,-32,-82,-81,-78,-33,-71,-76,-39,-30,-57,-89,-53,-60,-38,-79,-77,-77,-83,-72,-72,-35,-74,-75,-69,-70,-31,-57,-23,-80,-55,-60,218,-57,-34,234,-54,-37,-36,-23,-62,-23,-61,]),'ELSE':([10,19,20,24,26,27,28,29,30,31,32,34,43,48,49,51,52,53,55,57,62,63,82,104,110,114,132,137,139,140,141,142,143,150,165,166,167,168,171,172,178,189,192,194,200,212,213,219,228,259,271,274,276,277,278,],[-22,-29,-21,-52,-86,-85,-84,-51,-40,-72,-77,-41,-32,-82,-81,-78,-33,-71,-76,-39,-30,84,-57,-89,-53,-60,-38,-79,-77,-77,-83,-72,-72,-35,-74,-75,-69,-70,-31,-57,-23,-80,-55,-60,-63,-57,-34,-58,-54,-37,-36,-23,-62,-23,-61,]),'ID':([1,3,4,5,6,7,8,9,10,11,12,13,16,17,18,19,20,24,25,26,27,28,29,30,31,32,33,34,39,43,44,47,48,49,51,52,53,55,56,57,59,60,61,62,64,68,69,70,72,73,74,75,76,78,79,80,81,82,84,91,92,93,96,99,102,103,104,105,106,108,110,112,113,114,116,117,118,119,120,121,122,126,129,130,131,132,137,138,139,140,141,142,143,144,146,147,149,150,152,153,158,159,161,162,165,166,167,168,170,171,172,176,177,178,180,183,184,185,186,187,189,192,193,194,197,199,200,205,206,207,208,210,212,213,214,215,216,217,222,223,224,226,227,228,236,237,238,239,244,247,248,249,250,253,256,258,259,261,271,274,276,277,278,],[3,-7,14,-25,14,23,24,25,-22,-24,-6,28,-5,-4,-3,-29,-21,-52,-1,-86,-85,-84,-51,-40,-72,-77,-88,-41,65,-32,-8,-10,-82,-81,-78,-33,-71,-76,28,-39,14,28,28,-30,90,90,28,99,-11,-12,28,-73,-73,-73,-73,14,14,-57,-43,90,-90,130,90,-9,28,28,-89,28,28,14,-53,28,14,-60,-109,-110,-111,-113,-108,-112,90,28,90,14,159,-38,-79,28,-77,-77,-83,-72,-72,90,171,28,14,-35,-90,-90,14,14,-68,28,-74,-75,-69,-70,90,-31,-57,90,90,14,28,14,-68,14,-48,-19,-80,-55,28,-60,-90,-90,14,14,14,14,-14,-68,-57,-34,90,90,90,90,14,14,28,14,-68,-54,14,-20,249,14,90,14,-13,-65,261,90,90,90,-37,-64,-36,14,14,14,14,]),'IF':([3,4,6,7,10,12,16,17,18,19,20,22,24,25,26,27,28,29,30,31,32,34,40,43,44,47,48,49,51,52,53,55,57,59,62,72,73,80,81,82,84,85,99,104,108,110,113,114,130,132,137,139,140,141,142,143,149,150,158,159,161,165,166,167,168,171,172,174,178,183,184,185,186,187,189,192,194,200,205,206,207,208,210,212,213,222,223,226,227,228,236,237,238,239,247,248,249,250,259,261,271,274,276,277,278,],[-7,15,15,-44,-22,-6,-5,-4,-3,-29,-21,41,-52,-1,-86,-85,-84,-51,-40,-72,-77,-41,67,-32,-8,-10,-82,-81,-78,-33,-71,-76,-39,15,-30,-11,-12,107,15,-57,-43,114,-9,-89,145,-53,15,-60,15,-38,-79,-77,-77,-83,-72,-72,15,-35,15,15,-68,-74,-75,-69,-70,-31,-57,194,15,15,-68,15,-48,-19,-80,-55,-60,15,15,15,15,-14,-68,-57,-34,15,15,15,-68,-54,15,-20,15,15,15,-13,-65,15,-37,-64,-36,15,15,15,15,]),'AND':([86,88,89,90,97,115,123,124,127,128,133,151,156,157,169,175,179,181,191,195,202,220,229,230,231,232,240,241,242,243,251,252,254,255,257,262,263,265,267,268,272,273,],[-86,-85,-100,-84,-100,-105,-104,152,-103,-100,-100,-99,-102,-101,-100,-100,-107,-100,-100,-96,-95,-106,-99,-101,-99,-101,-100,-100,-100,-100,-97,-91,-98,-92,-100,-99,-99,-100,-100,-100,-93,-94,]),'INT':([3,4,12,16,17,18,25,44,47,72,73,99,187,208,237,248,],[-7,11,-6,-5,-4,-3,-1,-8,-10,-11,-12,-9,-19,-14,-20,-13,]),'CPAREN':([26,27,28,31,32,37,48,49,51,53,55,77,83,86,88,89,90,97,101,104,115,123,127,128,133,136,137,139,140,141,142,143,148,151,155,156,157,163,164,165,166,167,168,169,175,179,181,189,191,195,201,202,209,220,225,229,230,231,232,240,241,242,243,251,252,254,255,257,262,263,265,267,268,272,273,],[-86,-85,-84,-72,-77,62,-82,-81,-78,-71,-76,104,111,-86,-85,125,-84,134,137,-89,-105,-104,-103,156,160,-17,-79,-77,-77,-83,-72,-72,173,-99,179,-102,-101,187,189,-74,-75,-69,-70,190,-100,-107,-100,-80,211,-96,220,-95,-18,-106,237,-99,-101,-99,-101,-100,-100,-100,-100,-97,-91,-98,-92,264,-99,-99,270,-100,-100,-93,-94,]),'LET':([86,87,88,90,115,123,127,156,179,196,198,220,230,232,241,243,],[-86,121,-85,-84,-105,-104,-103,-102,-107,121,121,-106,-101,-101,121,121,]),'OPAREN':([13,14,15,25,28,33,36,38,41,45,50,56,60,61,64,67,68,69,74,75,76,78,79,90,91,92,96,102,103,105,106,107,112,116,117,118,119,120,121,122,126,129,138,144,145,147,152,153,162,170,176,177,180,193,197,199,214,215,216,217,218,224,233,234,244,245,249,253,256,258,261,],[33,37,-42,-15,-87,-88,61,64,68,71,74,33,33,33,91,96,91,33,33,-73,-73,-73,-73,126,91,-90,91,33,33,33,33,144,33,-109,-110,-111,-113,-108,-112,91,33,91,33,91,170,33,-90,-90,33,91,91,91,33,33,-90,-90,91,91,91,91,-43,33,244,-43,91,258,37,91,91,91,37,]),'NOT':([64,68,91,96,144,152,153,170,176,177,244,258,],[92,92,92,92,92,-90,-90,92,197,199,92,92,]),'EXIT':([134,160,190,211,],[161,184,210,227,]),'OR':([86,88,89,90,97,115,123,124,127,128,133,151,156,157,169,175,179,181,191,195,202,220,229,230,231,232,240,241,242,243,251,252,254,255,257,262,263,265,267,268,272,273,],[-86,-85,-100,-84,-100,-105,-104,153,-103,-100,-100,-99,-102,-101,-100,-100,-107,-100,-100,-96,-95,-106,-99,-101,-99,-101,-100,-100,-100,-100,-97,-91,-98,-92,-100,-99,-99,-100,-100,-100,-93,-94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'slogicexp':([64,68,91,96,122,129,144,170,176,177,214,215,216,217,244,253,256,258,],[87,87,87,87,151,157,87,87,196,198,229,230,231,232,87,262,263,87,]),'paso2do':([40,],[66,]),'statements':([4,59,81,113,130,159,178,185,205,207,226,236,239,274,277,],[6,80,108,149,158,183,200,206,222,223,238,247,250,276,278,]),'pasonot':([157,230,232,],[181,241,243,]),'paso4dim':([209,],[225,]),'variables':([3,],[4,]),'paso4for1':([247,],[260,]),'paso1dim':([25,],[45,]),'paso1for':([23,],[42,]),'paso2lgexp':([89,97,128,133,169,175,181,191,240,241,242,243,257,265,267,268,],[124,124,124,124,124,195,202,124,251,252,254,255,124,124,272,273,]),'paso3dim':([136,],[163,]),'logicop':([87,196,198,241,243,],[122,214,216,253,256,]),'paso9':([82,172,212,],[110,192,228,]),'paso12':([27,88,],[49,123,]),'paso13':([26,86,],[48,115,]),'logicexp':([64,68,91,96,144,170,244,258,],[89,97,128,133,169,191,257,265,]),'paso4do':([161,184,210,227,],[185,205,226,239,]),'tipo':([4,],[9,]),'paso4bool':([114,194,],[150,213,]),'paso2bool':([125,264,270,],[154,269,275,]),'write':([13,],[29,]),'dowhile':([59,],[81,]),'subroutines':([65,],[94,]),'paso52dim':([237,],[248,]),'statement':([4,6,59,80,81,108,113,130,149,158,159,178,183,185,200,205,206,207,222,223,226,236,238,239,247,250,274,276,277,278,],[10,20,10,20,10,20,10,10,20,20,10,10,20,10,20,10,20,10,20,20,10,10,20,10,20,20,10,20,10,20,]),'paso1do':([7,],[22,]),'correction':([34,],[57,]),'empty':([25,],[47,]),'paso2for':([98,],[135,]),'paso3bool':([84,218,234,],[113,233,245,]),'paso4for2':([223,],[235,]),'paso51dim':([187,],[208,]),'variables4':([4,],[12,]),'subexpression':([13,56,60,61,69,74,105,106,112,126,138,147,162,180,193,224,],[31,31,31,31,31,31,142,143,31,31,31,31,31,31,31,31,]),'paso8':([14,249,261,],[36,36,36,]),'readquad':([24,],[43,]),'andornot':([92,152,153,197,199,],[129,176,177,215,217,]),'paso1':([28,90,],[51,127,]),'paso1lgexp':([151,229,231,262,263,],[175,240,242,267,268,]),'ssubexpression':([13,56,60,61,69,74,102,103,105,106,112,126,138,147,162,180,193,224,],[32,32,32,32,32,32,139,140,32,32,32,32,32,32,32,32,32,32,]),'paso4':([31,34,77,82,83,98,101,142,143,148,155,164,172,186,201,212,236,],[53,58,58,58,58,58,58,167,168,58,58,58,58,58,58,58,58,]),'paso5':([31,32,139,140,142,143,],[54,55,165,166,54,54,]),'paso6':([33,],[56,]),'paso7':([104,],[141,]),'loopvars':([25,],[44,]),'paso2dim':([71,],[100,]),'iffs':([200,],[219,]),'paso14':([28,],[50,]),'ifs':([38,],[63,]),'paso23':([75,76,78,79,],[102,103,105,106,]),'paso3for':([186,],[207,]),'declare':([4,6,59,80,81,108,113,130,149,158,159,178,183,185,200,205,206,207,222,223,226,236,238,239,247,250,274,276,277,278,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'variables3':([4,],[16,]),'variables2':([4,],[17,]),'variables1':([4,],[18,]),'programa':([0,],[2,]),'dowhilenoid':([22,],[40,]),'writequad':([29,],[52,]),'expression':([13,56,60,61,69,74,112,126,138,147,162,180,193,224,],[34,77,82,83,98,101,148,155,164,172,186,201,212,236,]),'paso1bool':([15,107,145,],[38,38,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','lexsin.py',114),
  ('programa -> PROGRAM ID variables statements END PROGRAM ID subroutines','programa',8,'p_programa','lexsin.py',118),
  ('variables -> variables variables1','variables',2,'p_variables','lexsin.py',121),
  ('variables -> variables variables2','variables',2,'p_variables','lexsin.py',122),
  ('variables -> variables variables3','variables',2,'p_variables','lexsin.py',123),
  ('variables -> variables variables4','variables',2,'p_variables','lexsin.py',124),
  ('variables -> <empty>','variables',0,'p_variables','lexsin.py',125),
  ('variables1 -> tipo ID loopvars','variables1',3,'p_variables1','lexsin.py',127),
  ('loopvars -> loopvars COMMA ID','loopvars',3,'p_loopvars','lexsin.py',130),
  ('loopvars -> empty','loopvars',1,'p_loopvars','lexsin.py',131),
  ('variables2 -> tipo ID EQUAL NUMBER','variables2',4,'p_variables2','lexsin.py',135),
  ('variables2 -> tipo ID EQUAL REAL','variables2',4,'p_variables2','lexsin.py',136),
  ('variables3 -> tipo ID paso1dim OPAREN paso2dim NUMBER paso3dim COMMA NUMBER paso4dim CPAREN paso52dim','variables3',12,'p_variables3','lexsin.py',146),
  ('variables4 -> tipo ID paso1dim OPAREN paso2dim NUMBER paso3dim CPAREN paso51dim','variables4',9,'p_variables4','lexsin.py',148),
  ('paso1dim -> <empty>','paso1dim',0,'p_paso1dim','lexsin.py',150),
  ('paso2dim -> <empty>','paso2dim',0,'p_paso2dim','lexsin.py',154),
  ('paso3dim -> <empty>','paso3dim',0,'p_paso3dim','lexsin.py',157),
  ('paso4dim -> <empty>','paso4dim',0,'p_paso4dim','lexsin.py',162),
  ('paso51dim -> <empty>','paso51dim',0,'p_paso51dim','lexsin.py',167),
  ('paso52dim -> <empty>','paso52dim',0,'p_paso52dim','lexsin.py',171),
  ('statements -> statements statement','statements',2,'p_statements','lexsin.py',173),
  ('statements -> statement','statements',1,'p_statements','lexsin.py',174),
  ('statements -> <empty>','statements',0,'p_statements','lexsin.py',175),
  ('tipo -> INT','tipo',1,'p_tipo','lexsin.py',178),
  ('tipo -> REAL','tipo',1,'p_tipo','lexsin.py',179),
  ('subroutines -> subroutines SUBROUTINE ID statements END SUBROUTINE','subroutines',6,'p_subroutines','lexsin.py',185),
  ('subroutines -> SUBROUTINE ID statements END SUBROUTINE','subroutines',5,'p_subroutines','lexsin.py',186),
  ('subroutines -> <empty>','subroutines',0,'p_subroutines','lexsin.py',187),
  ('statement -> declare','statement',1,'p_statement','lexsin.py',190),
  ('statement -> ID OPAREN CPAREN','statement',3,'p_statement','lexsin.py',191),
  ('statement -> ID COLLON DO dowhile END DO ID','statement',7,'p_statement','lexsin.py',192),
  ('statement -> READ ID readquad','statement',3,'p_statement','lexsin.py',193),
  ('statement -> WRITE write writequad','statement',3,'p_statement','lexsin.py',194),
  ('statement -> IF paso1bool ifs ELSE paso3bool statements END IF paso4bool','statement',9,'p_statement','lexsin.py',195),
  ('statement -> IF paso1bool ifs END IF paso4bool','statement',6,'p_statement','lexsin.py',196),
  ('statement -> DO ID paso1for EQUAL expression paso2for COMMA expression paso3for COMMA expression statements paso4for1 END DO','statement',15,'p_statement','lexsin.py',197),
  ('statement -> DO ID paso1for EQUAL expression paso2for COMMA expression paso3for statements paso4for2 END DO','statement',13,'p_statement','lexsin.py',198),
  ('statement -> DO paso1do dowhilenoid paso2do END DO','statement',6,'p_statement','lexsin.py',199),
  ('write -> expression correction','write',2,'p_write','lexsin.py',201),
  ('write -> STRING','write',1,'p_write','lexsin.py',202),
  ('correction -> <empty>','correction',0,'p_correction','lexsin.py',205),
  ('paso1bool -> <empty>','paso1bool',0,'p_paso1bool','lexsin.py',209),
  ('paso3bool -> <empty>','paso3bool',0,'p_paso3bool','lexsin.py',212),
  ('paso1do -> <empty>','paso1do',0,'p_paso1do','lexsin.py',221),
  ('paso2do -> <empty>','paso2do',0,'p_paso2do','lexsin.py',225),
  ('paso1for -> <empty>','paso1for',0,'p_paso1for','lexsin.py',237),
  ('paso2for -> <empty>','paso2for',0,'p_paso2for','lexsin.py',242),
  ('paso3for -> <empty>','paso3for',0,'p_paso3for','lexsin.py',250),
  ('paso4for1 -> <empty>','paso4for1',0,'p_paso4for1','lexsin.py',264),
  ('paso4for2 -> <empty>','paso4for2',0,'p_paso4for2','lexsin.py',280),
  ('writequad -> <empty>','writequad',0,'p_writequad','lexsin.py',293),
  ('readquad -> <empty>','readquad',0,'p_readquad','lexsin.py',300),
  ('declare -> ID paso8 EQUAL expression paso9','declare',5,'p_declare','lexsin.py',307),
  ('declare -> ID paso8 OPAREN expression COMMA expression CPAREN EQUAL expression paso9','declare',10,'p_declare','lexsin.py',308),
  ('declare -> ID paso8 OPAREN expression CPAREN EQUAL expression paso9','declare',8,'p_declare','lexsin.py',309),
  ('paso8 -> <empty>','paso8',0,'p_paso8','lexsin.py',312),
  ('paso9 -> <empty>','paso9',0,'p_paso9','lexsin.py',316),
  ('ifs -> OPAREN logicexp CPAREN paso2bool THEN statements iffs','ifs',7,'p_ifs','lexsin.py',325),
  ('paso2bool -> <empty>','paso2bool',0,'p_paso2bool','lexsin.py',327),
  ('paso4bool -> <empty>','paso4bool',0,'p_paso4bool','lexsin.py',342),
  ('iffs -> iffs ELSIF paso3bool OPAREN logicexp CPAREN paso2bool THEN statements','iffs',9,'p_iffs','lexsin.py',349),
  ('iffs -> ELSIF paso3bool OPAREN logicexp CPAREN paso2bool THEN statements','iffs',8,'p_iffs','lexsin.py',350),
  ('iffs -> <empty>','iffs',0,'p_iffs','lexsin.py',351),
  ('dowhile -> dowhile statements IF OPAREN logicexp CPAREN EXIT paso4do statements ID','dowhile',10,'p_dowhile','lexsin.py',354),
  ('dowhile -> statements IF OPAREN logicexp CPAREN EXIT paso4do statements ID','dowhile',9,'p_dowhile','lexsin.py',355),
  ('dowhilenoid -> dowhilenoid IF OPAREN logicexp CPAREN EXIT paso4do statements','dowhilenoid',8,'p_dowhilenoid','lexsin.py',357),
  ('dowhilenoid -> IF OPAREN logicexp CPAREN EXIT paso4do statements','dowhilenoid',7,'p_dowhilenoid','lexsin.py',358),
  ('paso4do -> <empty>','paso4do',0,'p_paso4do','lexsin.py',360),
  ('expression -> expression paso4 PLUS paso23 subexpression paso4','expression',6,'p_expression','lexsin.py',391),
  ('expression -> expression paso4 MINUS paso23 subexpression paso4','expression',6,'p_expression','lexsin.py',392),
  ('expression -> subexpression paso4','expression',2,'p_expression','lexsin.py',393),
  ('paso4 -> <empty>','paso4',0,'p_paso4','lexsin.py',396),
  ('paso23 -> <empty>','paso23',0,'p_paso23','lexsin.py',415),
  ('subexpression -> subexpression paso5 MUL paso23 ssubexpression paso5','subexpression',6,'p_subexpression','lexsin.py',418),
  ('subexpression -> subexpression paso5 DIV paso23 ssubexpression paso5','subexpression',6,'p_subexpression','lexsin.py',419),
  ('subexpression -> ssubexpression paso5','subexpression',2,'p_subexpression','lexsin.py',420),
  ('paso5 -> <empty>','paso5',0,'p_paso5','lexsin.py',423),
  ('ssubexpression -> ID paso1','ssubexpression',2,'p_ssubexpression','lexsin.py',442),
  ('ssubexpression -> ID paso14 OPAREN expression CPAREN','ssubexpression',5,'p_ssubexpression','lexsin.py',443),
  ('ssubexpression -> ID paso14 OPAREN expression COMMA expression CPAREN','ssubexpression',7,'p_ssubexpression','lexsin.py',444),
  ('ssubexpression -> NUMBER paso12','ssubexpression',2,'p_ssubexpression','lexsin.py',445),
  ('ssubexpression -> REAL paso13','ssubexpression',2,'p_ssubexpression','lexsin.py',446),
  ('ssubexpression -> OPAREN paso6 expression CPAREN paso7','ssubexpression',5,'p_ssubexpression','lexsin.py',447),
  ('paso1 -> <empty>','paso1',0,'p_paso1','lexsin.py',450),
  ('paso12 -> <empty>','paso12',0,'p_paso12','lexsin.py',455),
  ('paso13 -> <empty>','paso13',0,'p_paso13','lexsin.py',460),
  ('paso14 -> <empty>','paso14',0,'p_paso14','lexsin.py',465),
  ('paso6 -> <empty>','paso6',0,'p_paso6','lexsin.py',470),
  ('paso7 -> <empty>','paso7',0,'p_paso7','lexsin.py',473),
  ('andornot -> <empty>','andornot',0,'p_andornot','lexsin.py',476),
  ('logicexp -> logicexp paso2lgexp AND andornot NOT andornot slogicexp pasonot paso2lgexp','logicexp',9,'p_logicexp','lexsin.py',480),
  ('logicexp -> logicexp paso2lgexp OR andornot NOT andornot slogicexp pasonot paso2lgexp','logicexp',9,'p_logicexp','lexsin.py',481),
  ('logicexp -> logicexp paso2lgexp AND andornot NOT andornot slogicexp pasonot logicop slogicexp paso1lgexp paso2lgexp','logicexp',12,'p_logicexp','lexsin.py',482),
  ('logicexp -> logicexp paso2lgexp OR andornot NOT andornot slogicexp pasonot logicop slogicexp paso1lgexp paso2lgexp','logicexp',12,'p_logicexp','lexsin.py',483),
  ('logicexp -> NOT andornot slogicexp pasonot paso2lgexp','logicexp',5,'p_logicexp','lexsin.py',484),
  ('logicexp -> slogicexp logicop slogicexp paso1lgexp paso2lgexp','logicexp',5,'p_logicexp','lexsin.py',485),
  ('logicexp -> logicexp paso2lgexp AND andornot slogicexp logicop slogicexp paso1lgexp paso2lgexp','logicexp',9,'p_logicexp','lexsin.py',486),
  ('logicexp -> logicexp paso2lgexp OR andornot slogicexp logicop slogicexp paso1lgexp paso2lgexp','logicexp',9,'p_logicexp','lexsin.py',487),
  ('paso1lgexp -> <empty>','paso1lgexp',0,'p_paso1lgexp','lexsin.py',489),
  ('paso2lgexp -> <empty>','paso2lgexp',0,'p_paso2lgexp','lexsin.py',508),
  ('pasonot -> <empty>','pasonot',0,'p_pasonot','lexsin.py',530),
  ('slogicexp -> OPAREN logicexp CPAREN','slogicexp',3,'p_slogicexp','lexsin.py',552),
  ('slogicexp -> ID paso1','slogicexp',2,'p_slogicexp','lexsin.py',553),
  ('slogicexp -> NUMBER paso12','slogicexp',2,'p_slogicexp','lexsin.py',554),
  ('slogicexp -> REAL paso13','slogicexp',2,'p_slogicexp','lexsin.py',555),
  ('slogicexp -> ID OPAREN expression COMMA expression CPAREN','slogicexp',6,'p_slogicexp','lexsin.py',556),
  ('slogicexp -> ID OPAREN expression CPAREN','slogicexp',4,'p_slogicexp','lexsin.py',557),
  ('logicop -> GT','logicop',1,'p_logicop','lexsin.py',559),
  ('logicop -> GET','logicop',1,'p_logicop','lexsin.py',560),
  ('logicop -> NE','logicop',1,'p_logicop','lexsin.py',561),
  ('logicop -> EQUALS','logicop',1,'p_logicop','lexsin.py',562),
  ('logicop -> LET','logicop',1,'p_logicop','lexsin.py',563),
  ('logicop -> LT','logicop',1,'p_logicop','lexsin.py',564),
]
